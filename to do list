// to do list 
#include <iostream>
#include <vector>
#include <string>

using namespace std;

// Structure to represent a task in the to-do list
struct Task {
    string description;
    bool isCompleted;

    Task(string desc) : description(desc), isCompleted(false) {}  // Constructor for a new task
};

// Function to display the to-do list
void displayTasks(const vector<Task>& tasks) {
    if (tasks.empty()) {
        cout << "Your to-do list is empty." << endl;
        return;
    }
    cout << "\nTo-Do List:" << endl;
    for (size_t i = 0; i < tasks.size(); ++i) {
        cout << i + 1 << ". " << (tasks[i].isCompleted ? "[X] " : "[ ] ") << tasks[i].description << endl;
    }
}

// Function to add a task to the to-do list
void addTask(vector<Task>& tasks) {
    cout << "Enter the description of the new task: ";
    string description;
    cin.ignore();  // Clear input buffer
    getline(cin, description);  // Read task description
    tasks.emplace_back(description);  // Add new task to the list
    cout << "Task added successfully!" << endl;
}

// Function to mark a task as completed
void markTaskAsCompleted(vector<Task>& tasks) {
    displayTasks(tasks);
    if (tasks.empty()) return;

    cout << "Enter the number of the task to mark as completed: ";
    int taskNumber;
    cin >> taskNumber;

    if (taskNumber < 1 || taskNumber > static_cast<int>(tasks.size())) {
        cout << "Invalid task number." << endl;
    } else {
        tasks[taskNumber - 1].isCompleted = true;  // Mark task as completed
        cout << "Task marked as completed!" << endl;
    }
}

// Function to delete a task from the to-do list
void deleteTask(vector<Task>& tasks) {
    displayTasks(tasks);
    if (tasks.empty()) return;

    cout << "Enter the number of the task to delete: ";
    int taskNumber;
    cin >> taskNumber;

    if (taskNumber < 1 || taskNumber > static_cast<int>(tasks.size())) {
        cout << "Invalid task number." << endl;
    } else {
        tasks.erase(tasks.begin() + taskNumber - 1);  // Remove task from list
        cout << "Task deleted successfully!" << endl;
    }
}

int main() {
    vector<Task> tasks;  // Vector to store tasks
    int choice;

    while (true) {
        cout << "\nTo-Do List Menu:" << endl;
        cout << "1. Display Tasks" << endl;
        cout << "2. Add Task" << endl;
        cout << "3. Mark Task as Completed" << endl;
        cout << "4. Delete Task" << endl;
        cout << "5. Exit" << endl;
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                displayTasks(tasks);
                break;
            case 2:
                addTask(tasks);
                break;
            case 3:
                markTaskAsCompleted(tasks);
                break;
            case 4:
                deleteTask(tasks);
                break;
            case 5:
                cout << "Exiting the program. Goodbye!" << endl;
                return 0;
            default:
                cout << "Invalid choice. Please try again." << endl;
        }
    }
}